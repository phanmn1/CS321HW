{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red10\green78\blue108;\red255\green255\blue255;\red40\green40\blue40;
\red0\green0\blue0;\red83\green83\blue83;\red12\green100\blue131;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl330
{\field{\*\fldinst{HYPERLINK "javascript:void(0)"}}{\fldrslt 
\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Advice for Homework 4: Don't over-focus on the tests!}}
\f0\fs22 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl330
\cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Contains unread posts\cb1 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "javascript:void(0);"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\pardeftab720
\cf5 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Actions for Advice for Homework 4: Don't over-focus on the tests!\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
}}\pard\pardeftab720\sl330

\fs2 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl330

\fs22 \cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Mark Jones posted Mar 4, 2015 12:57 PM\cb1 \
\pard\pardeftab720\sl330
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl330
{\field{\*\fldinst{HYPERLINK "javascript:void(0);"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \pard\pardeftab720\sl330
\cf7 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Subscribe}}\
\pard\pardeftab720\sl330

\fs2 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl330\sa220

\fs22 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 I know that quite a few students have followed the advice to make an early start on HW4. \'a0Yay! \'a0But after seeing where some of those pioneers have run in to problems, I want to make the following strong suggestion:\'a0
\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Do not run the tests that are included with the the homework materials until you have completed a first draft of your solution!
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0The tests will still be useful to you later on, but from what I've seen so far, there is a danger of focusing too much on passing tests, and, in the process, losing sight of understanding and solving the underlying problem that is really the core of this assignment.\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 So what strategy would I suggest? And how should you focus on the underlying problem? \'a0The answer to that second question is already included in the text for the assignment, but let me make it more clear. \'a0Open up\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ast/Expr.java
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0in an editor and replace the implementation of the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 typeOf()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0method with the following code:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl330\sa220

\f1 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0\'a0\'a0public abstract Type typeOf(Context ctxt, TypeEnv locals)
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 
\f1 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0\'a0\'a0\'a0\'a0throws Failure;
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 All you're doing here is adding "
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 abstract
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 " at the beginning and replacing the body of the method at the end with a semicolon. \'a0Now do the same thing with the implementation of\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 check()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0in\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ast/Stmt.java
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , replacing it with the following:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\f1 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0\'a0\'a0public abstract TypeEnv check(Context ctxt, TypeEnv locals)
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 
\f1 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0\'a0\'a0\'a0\'a0throws Failure;
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Now try compiling the program (
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 javac Static ast/*.java
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ) ... and you should see a list of twenty errors. \'a0But it's not that bad:\'a0there are really only two kinds of problem. \'a0Specifically, 14 of those errors are reporting something along the lines of:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl330

\f1 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0 \'a0SomeExpressionClassName is not abstract and does not override\'a0abstract method typeOf(Context,TypeEnv) in Expr
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\sl330
\cf4 \cb3 And the other 6 errors are something like:\cb1 \
\
\pard\pardeftab720\sl330

\f1 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0 \'a0 \'a0SomeStatementClassName is not abstract and does not override\'a0abstract method check(Context,TypeEnv) in Stmt
\f0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\sl330
\cf4 \cb3 These messages are indicating that you need to add definitions for these missing methods. \'a0And in quite a few cases, with a little bit of care, a single carefully placed method will eliminate several of the above errors in a single step.\cb1 \
\
\cb3 In the rest of this post, I'll try to provide some more explicit hints to some of the resources that you have already to help with this task, perhaps without even realizing they are there. \'a0We'll start with expressions. Looking through the list of errors, you'll see that\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 typeOf()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0implementations are needed for:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls1\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 FloatLit
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , representing floating point literals. \'a0The code for\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 IntLit
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0representing integer literals, might be a good place to look for\'a0inspiration about what is needed here. \'a0It shouldn't be vey complicated!\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls2\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Assign
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0expressions are very similar to identifier expressions, except\'a0that they also contain a right hand side expression as well as a\'a0variable name. \'a0Looking at the implementation of\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 typeOf()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Id
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class should help you figure out how to find the type of the\'a0variable in an assignment. \'a0And you can find the type of the\'a0right hand side using a recursive call to\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 typeOf()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . \'a0All that remains is to check that the two types are compatible, and to insert a cast if necessary. \'a0If you\'a0haven't studied the code that was supplied, you might not realize that\'a0the implementation of\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 extendGlobalEnv()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 InitVarIntro
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class\'a0includes a sample that shows how this kind of matching can be done ...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls3\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Add
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Div
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Mul
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , and\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Sub
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 : These arithmetic operations will all use the\'a0same type checking code. \'a0It would be a shame to have to write four\'a0copies of the same code, wouldn't it? \'a0(Just as it would have been a pity to have\'a0had to copy the code for\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 &&
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0and\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ||
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ; of course, that's why the code in the question\'a0for these operators was shared between them by putting it in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 LogBinExpr
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class. \'a0Maybe you can\'a0find a suitable place to implement the type checking code for the\'a0four arithmetic operators by looking at the class diagram for expressions that was\'a0included in the HW3 text? \'a0Or perhaps just by browsing the files in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ast
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0directory a little more carefully?) \'a0There will also be some slightly tricky\'a0logic to deal with mixtures of integer and floating point arguments.\'a0\'a0But keep your head clear, and use what you did already for assignments to guide\'a0you through each of the different combinations that need to\'a0be\'a0considered ...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls4\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Eql
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Gt
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Gte
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Lt
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Lte
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , and\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Neq
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0are comparison operations and they can\'a0also share the same type checking code if you can find a suitable place\'a0to put it ... \'a0Again, you need to handle mixtures of\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 int
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0and\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 double
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0arguments, but you'll already know how to do that once you've done the\'a0arithmetic operators.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls5\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 DoubleToInt
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0might be a good candidate to look at next. \'a0This construct\'a0is new to HW4 (i.e., it wasn't in HW3), but at least you have a full\'a0implementation for the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 IntToDouble
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class to use as a model ...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls6\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Call
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0is possibly the trickiest of the bunch, not because there's\'a0anything fundamentally difficult, but because there are several\'a0different conditions to check for. \'a0You might end up leaving this one\'a0until last. \'a0But when you do come back to it, remember that, as\'a0discussed in the lecture, you need to check three different things: the\'a0function must have been defined, the number of arguments should match\'a0the number of formals, and the types of the actuals should match the\'a0types of the formals too ...\cb1 \
\pard\pardeftab720\sl330
\cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ok, let's pause for breath ... at this point, you've already handled 14 different\'a0kinds of expression ... and you've only had to write six methods. \'a0Much better that worrying about passing 90 tests.\cb1 \
\
\cb3 Now let's think about statements:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls7\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 An\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Empty
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0statement doesn't do very much, so there isn't much to check\'a0either ... You just need to figure out which environment to return\'a0(and, to be honest, there aren't many options to choose from ...)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls8\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 In case you forgot, something very close to the code that you need for\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0statements was shown in the lecture! \'a0You don't need to worry about\'a0using 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 try \{ ... \} catch (...) \{ ... \}
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  statements at this point, so you\'a0can keep the code pretty simple ... But don't forget to allow for the possibility that the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 else
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0branch might be\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 null
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls9\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 For the purposes of type checking,\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 While
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0statements look a lot like a simplified kind of\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0statement ...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls10\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Return
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0statements aren't too difficult to handle once you break things\'a0down into separate cases: either there is an expression to be returned,\'a0or else that field is\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 null
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . \'a0And if you look in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Context
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class,\'a0you'll find that the expected return type of the current function is\'a0available in the field\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ctxt.retType
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0... Yes, you will need to be ready to convert\'a0an\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 int
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0to a\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 double
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , or vice versa, as necessary ... but you've done that\'a0already a few times already by now, so it shouldn't take too much extra\'a0work to do it again here.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls11\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 An\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ExprStmt
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0contains an expression that will be evaluated for its\'a0effect, discarding any result. \'a0How can we check that the expression\'a0has a valid type? \'a0(And note that we don't care what that type might be\'a0because the result is going to be discarded anyway ...)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl330
\ls12\ilvl0
\f1 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Locals
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0represent local variable declarations, which are quite a lot\'a0like global variable declarations (both include a type and an array of\'a0VarIntro values). \'a0Even though code for\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Globals
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0is included (you knew that, and have studied it already, right?), you will have some work to do for\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Locals
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , so don't underestimate this step. \'a0But maybe you\'a0should consider implementing a function like\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 check()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0for the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 VarIntro
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0and\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 InitVarIntro
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0classes that takes a context and a local environment and returns a new environment, extended with an entry for whatever new variable was introduced. \'a0 (Your\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 check()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0method will probably also need to take the\'a0type\'a0of the variables being introduced as a parameter.) \'a0It might also be worth pointing\'a0out that the last line in the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 extendGlobalEnv()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0method of the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 InitVarIntro
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0class illustrates the basic method for extending an\'a0environment, albeit using the\'a0
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 globals
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0environment that is stored in the\'a0context, rather than the local environment that you will want to focus\'a0on here. \'a0In fact we also saw something very similar in the Week 8 lab,\'a0although it's probably quicker to recreate it now if you don't\'a0remember that, than it will be to go back and look for it in the lab notes.\cb1 \
\pard\pardeftab720\sl330
\cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ok, if you've got rough versions for all of the above working (or at\'a0least, compiling), then now might be the right time to start running\'a0the automated tests to help root out any coding bugs or uncover any\'a0details that you might have forgotten, overlooked, or misunderstood.\cb1 \
\
\cb3 Two final comments: (1) This isn't an all or nothing assignment; you can still get a good grade on this assignment, even if you don't pass all of the tests. (2) If you really can't figure out one or more of the cases above, you can always fill in specific method bodies with a statement like 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 throw new Failure("Come back to this later");
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  so that your code will at least compile again.\cb1 \
\
\cb3 I hope this helps ... Good luck!\cb1 \
}